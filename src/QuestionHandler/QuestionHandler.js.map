{"version":3,"file":"QuestionHandler.js","sourceRoot":"","sources":["QuestionHandler.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,KAA0C,MAAM,OAAO,CAAC;AAE/D,MAAM,OAAO,eAAe;IAA5B;QAEY,cAAS,GAAkB,IAAI,CAAC;QAChC,UAAK,GAA0B,IAAI,CAAC;IA4ChD,CAAC;IA1CU,MAAM,CAAC,WAAW;QACrB,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC;YAC5B,eAAe,CAAC,QAAQ,GAAG,IAAI,eAAe,EAAE,CAAC;QACrD,CAAC;QACD,OAAO,eAAe,CAAC,QAAQ,CAAC;IACpC,CAAC;IAEY,eAAe,CAAC,QAAgB;;YAEzC,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;gBACb,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC7B,CAAC;YAED,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC,GAAG,EAAE;gBACzB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YAC1B,CAAC,EAAE,KAAK,CAAC,CAAC;YAEV,MAAM,MAAM,GAAuB;gBAC/B,OAAO,EAAE;oBACL,cAAc,EAAE,kBAAkB;oBAClC,eAAe,EAAE,UAAU,CAAC,MAAM,SAAS,CAAC,WAAW,EAAE,CAAC,CAAC,QAAQ,EAAE,EAAE;iBAC1E;aACJ,CAAC;YAEF,IAAI,CAAC;gBACD,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;gBAChC,MAAM,QAAQ,GAAuB,MAAM,KAAK,CAAC,IAAI,CAAC,yCAAyC,EAAE;oBAC7F,QAAQ,EAAE,QAAQ;oBAClB,SAAS,EAAE,IAAI,CAAC,SAAS;iBAC5B,EAAE,MAAM,CAAC,CAAC;gBAEX,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;oBAClB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC;gBAC7C,CAAC;gBAED,OAAO,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC;YAChC,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACb,OAAO,CAAC,KAAK,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;gBAC/B,OAAO,SAAS,CAAC;YACrB,CAAC;YACD,+BAA+B;QACnC,CAAC;KAAA;;AA7Cc,wBAAQ,GAA2B,IAAI,AAA/B,CAAgC","sourcesContent":["import axios, {AxiosRequestConfig, AxiosResponse} from \"axios\";\r\n\r\nexport class QuestionHandler {\r\n    private static instance: QuestionHandler | null = null;\r\n    private sessionId: string | null = null;\r\n    private timer: NodeJS.Timeout | null = null;\r\n\r\n    public static getInstance(): QuestionHandler {\r\n        if (!QuestionHandler.instance) {\r\n            QuestionHandler.instance = new QuestionHandler();\r\n        }\r\n        return QuestionHandler.instance;\r\n    }\r\n\r\n    public async getAnswerFromAi(question: string): Promise<string | undefined> {\r\n\r\n        if (this.timer) {\r\n            clearTimeout(this.timer);\r\n        }\r\n\r\n        this.timer = setTimeout(() => {\r\n            this.sessionId = null;\r\n        }, 60000);\r\n\r\n        const config: AxiosRequestConfig = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${(await TokenUtil.getInstance()).getToken()}`\r\n            }\r\n        };\r\n\r\n        try {\r\n            console.log('Sending response');\r\n            const response: AxiosResponse<any> = await axios.post('http://localhost:5260/assistantairouter', {\r\n                question: question,\r\n                sessionId: this.sessionId\r\n            }, config);\r\n\r\n            if (!this.sessionId) {\r\n                this.sessionId = response.data.sessionId;\r\n            }\r\n\r\n            return response.data.answer;\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n            return undefined;\r\n        }\r\n        //uhrzeit abchecken alternative\r\n    }\r\n}\r\n\r\n"]}